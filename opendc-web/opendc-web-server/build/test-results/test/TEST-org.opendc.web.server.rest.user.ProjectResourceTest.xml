<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.opendc.web.server.rest.user.ProjectResourceTest" tests="13" skipped="0" failures="0" errors="0" timestamp="2025-05-17T00:28:09" hostname="ece-d6200-audu" time="0.159">
  <properties/>
  <testcase name="testGetAllWithNoAvailableProjects()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.012"/>
  <testcase name="testDeleteNonOwner()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.007"/>
  <testcase name="testDeleteNonExistent()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.007"/>
  <testcase name="testGetNonExisting()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.006"/>
  <testcase name="testCreateEmpty()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.008"/>
  <testcase name="testGetExisting()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.043"/>
  <testcase name="testCreateBlankName()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.008"/>
  <testcase name="testGetAllWithoutToken()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.004"/>
  <testcase name="testGetAllWithInvalidScope()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.005"/>
  <testcase name="testDeleteNotConnected()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.008"/>
  <testcase name="testCreate()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.019"/>
  <testcase name="testDelete()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.014"/>
  <testcase name="testGetAll()" classname="org.opendc.web.server.rest.user.ProjectResourceTest" time="0.009"/>
  <system-out><![CDATA[Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        pa1_0.user_name=?
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        p1_0.id,
        p1_0.created_at,
        p1_0.name,
        p1_0.portfolios_created,
        p1_0.scenarios_created,
        p1_0.topologies_created,
        p1_0.updated_at 
    from
        Project p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        next value for project_id_seq
Hibernate: 
    insert 
    into
        Project
        (created_at, name, portfolios_created, scenarios_created, topologies_created, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ProjectAuthorization
        (role, project_id, user_name) 
    values
        (?, ?, ?)
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        (
            pa1_0.project_id, pa1_0.user_name
        ) in ((?, ?))
Hibernate: 
    select
        p1_0.id,
        p1_0.created_at,
        p1_0.name,
        p1_0.portfolios_created,
        p1_0.scenarios_created,
        p1_0.topologies_created,
        p1_0.updated_at 
    from
        Project p1_0 
    where
        p1_0.id=?
Hibernate: 
    select
        a1_0.project_id,
        a1_0.user_name,
        a1_0.role 
    from
        ProjectAuthorization a1_0 
    where
        a1_0.project_id=?
Hibernate: 
    select
        p1_0.project_id,
        p1_0.id,
        p1_0.name,
        p1_0.number,
        p1_0.targets 
    from
        Portfolio p1_0 
    where
        p1_0.project_id=? 
    order by
        p1_0.id
Hibernate: 
    select
        s1_0.project_id,
        s1_0.id,
        s1_0.name,
        s1_0.number,
        s1_0.phenomena,
        s1_0.portfolio_id,
        p1_0.id,
        p1_0.name,
        p1_0.number,
        p1_0.project_id,
        p2_0.id,
        p2_0.created_at,
        p2_0.name,
        p2_0.portfolios_created,
        p2_0.scenarios_created,
        p2_0.topologies_created,
        p2_0.updated_at,
        p1_0.targets,
        s1_0.scheduler_name,
        s1_0.topology_id,
        t1_0.id,
        t1_0.created_at,
        t1_0.name,
        t1_0.number,
        t1_0.project_id,
        p4_0.id,
        p4_0.created_at,
        p4_0.name,
        p4_0.portfolios_created,
        p4_0.scenarios_created,
        p4_0.topologies_created,
        p4_0.updated_at,
        t1_0.rooms,
        t1_0.updated_at,
        s1_0.sampling_fraction,
        s1_0.trace_id,
        t2_0.id,
        t2_0.name,
        t2_0.type 
    from
        Scenario s1_0 
    left join
        Portfolio p1_0 
            on p1_0.id=s1_0.portfolio_id 
    left join
        Project p2_0 
            on p2_0.id=p1_0.project_id 
    left join
        Topology t1_0 
            on t1_0.id=s1_0.topology_id 
    left join
        Project p4_0 
            on p4_0.id=t1_0.project_id 
    left join
        Trace t2_0 
            on t2_0.id=s1_0.trace_id 
    where
        s1_0.project_id=?
Hibernate: 
    select
        t1_0.project_id,
        t1_0.id,
        t1_0.created_at,
        t1_0.name,
        t1_0.number,
        t1_0.rooms,
        t1_0.updated_at 
    from
        Topology t1_0 
    where
        t1_0.project_id=? 
    order by
        t1_0.id
Hibernate: 
    update
        Project 
    set
        name=?,
        portfolios_created=?,
        scenarios_created=?,
        topologies_created=?,
        updated_at=? 
    where
        id=?
Hibernate: 
    delete 
    from
        ProjectAuthorization 
    where
        project_id=? 
        and user_name=?
Hibernate: 
    delete 
    from
        Project 
    where
        id=?
Hibernate: 
    select
        pa1_0.project_id,
        pa1_0.user_name,
        pa1_0.role 
    from
        ProjectAuthorization pa1_0 
    where
        pa1_0.user_name=?
Hibernate: 
    select
        p1_0.id,
        p1_0.created_at,
        p1_0.name,
        p1_0.portfolios_created,
        p1_0.scenarios_created,
        p1_0.topologies_created,
        p1_0.updated_at 
    from
        Project p1_0 
    where
        p1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
